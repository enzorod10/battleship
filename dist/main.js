(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),a=r.n(n),o=r(645),i=r.n(o)()(a());i.push([e.id,"*{\n    padding: 0px;\n    margin: 0px;\n}\n\nbody{\n    height: 100vh;\n    box-sizing: border-box;\n    display: grid;\n    grid-template-rows: 2fr 20fr 1fr;\n}\n\n.header{\n    border: 1px black solid;\n}\n\n.main{\n    border: 1px red solid;\n    display: flex;\n}\n\n.footer{\n    border: 1px yellow solid;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* main area section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 1 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player1Area{\n    border: 1px black solid;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 40px;\n}\n\n.player1Board{\n    width: 450px;\n    height: 450px;\n    border: 1px black solid;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player1Board > div{\n    border: 1px black solid;\n}\n\n.square.active{\n    background-color: rgb(153, 81, 81);\n}\n\n.messageContainer{\n    border: 1px red solid;\n    height: 50px;\n    width: 450px;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 2 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player2Area{\n    border: 1px black solid;\n    width: 100%;\n    display: grid;\n}\n\n.player2Board{\n    border: 1px black solid;\n    width: 450px;\n    height: 450px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player2Board > div{\n    border: 1px black solid;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;IACrB,aAAa;AACjB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA,2CAA2C;AAC3C,sBAAsB;AACtB,2CAA2C;;AAE3C,2CAA2C;AAC3C,0BAA0B;AAC1B,2CAA2C;AAC3C;IACI,uBAAuB;IACvB,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,YAAY;AAChB;;AAEA,2CAA2C;AAC3C,0BAA0B;AAC1B,2CAA2C;AAC3C;IACI,uBAAuB;IACvB,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["*{\n    padding: 0px;\n    margin: 0px;\n}\n\nbody{\n    height: 100vh;\n    box-sizing: border-box;\n    display: grid;\n    grid-template-rows: 2fr 20fr 1fr;\n}\n\n.header{\n    border: 1px black solid;\n}\n\n.main{\n    border: 1px red solid;\n    display: flex;\n}\n\n.footer{\n    border: 1px yellow solid;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* main area section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 1 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player1Area{\n    border: 1px black solid;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 40px;\n}\n\n.player1Board{\n    width: 450px;\n    height: 450px;\n    border: 1px black solid;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player1Board > div{\n    border: 1px black solid;\n}\n\n.square.active{\n    background-color: rgb(153, 81, 81);\n}\n\n.messageContainer{\n    border: 1px red solid;\n    height: 50px;\n    width: 450px;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 2 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player2Area{\n    border: 1px black solid;\n    width: 100%;\n    display: grid;\n}\n\n.player2Board{\n    border: 1px black solid;\n    width: 450px;\n    height: 450px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player2Board > div{\n    border: 1px black solid;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);n&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=n.base?l[0]+n.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var A=r(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var f=a(p,n);n.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=r(o[i]);t[s].references--}for(var l=n(e,a),c=0;c<o.length;c++){var u=r(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=l}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={id:n,exports:{}};return e[n](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=r(379),t=r.n(e),n=r(795),a=r.n(n),o=r(569),i=r.n(o),s=r(565),l=r.n(s),c=r(216),u=r.n(c),d=r(589),A=r.n(d),p=r(426),f={};f.styleTagTransform=A(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;let m={arrayOfSquares:[]};function h(e){let t=document.querySelector(".player1Board"),r=document.querySelector(".rotateButton"),n=document.querySelector(".message");r.addEventListener("click",b),t.addEventListener("mouseout",B),v(t,n,e)}function v(e,t,r){let n,a,o;document.querySelector(".message").textContent="Place your battleship (5)",e.addEventListener("click",a=function(i){o=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",a),e.removeEventListener("mouseover",n),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Battleship",5,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,o)?y(e,t,r):v(e,t,r)}),e.addEventListener("mouseover",n=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let r=0;r<10;r++)if(e.target===m.arrayOfSquares[t][r]){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<5;e++)r+e>9||m.arrayOfSquares[t][r+e].classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<5;e++)t+e>9||m.arrayOfSquares[t+e][r].classList.toggle("active")}})}function y(e,t,r){let n,a,o;document.querySelector(".message").textContent="Place your carrier (4)",e.addEventListener("click",n=function(i){o=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",a),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Carrier",4,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,o)?g(e,t,r):y(e,t,r)}),e.addEventListener("mouseover",a=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let r=0;r<10;r++)if(e.target===m.arrayOfSquares[t][r]){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<4;e++)r+e>9||m.arrayOfSquares[t][r+e].classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<4;e++)t+e>9||m.arrayOfSquares[t+e][r].classList.toggle("active")}})}function g(e,t,r){let n,a,o;document.querySelector(".message").textContent="Place your submarine(3)",e.addEventListener("click",n=function(i){o=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",a),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Submarine",3,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,o)?C(e,t,r):g(e,t,r)}),e.addEventListener("mouseover",a=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let r=0;r<10;r++)if(e.target===m.arrayOfSquares[t][r]){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<3;e++)r+e>9||m.arrayOfSquares[t][r+e].classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<3;e++)t+e>9||m.arrayOfSquares[t+e][r].classList.toggle("active")}})}function C(e,t,r){let n,a,o;document.querySelector(".message").textContent="Place your cruiser (2)",e.addEventListener("click",n=function(i){o=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",a),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Cruiser",2,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,o)?S(e,t,r):C(e,t,r)}),e.addEventListener("mouseover",a=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let r=0;r<10;r++)if(e.target===m.arrayOfSquares[t][r]){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<2;e++)r+e>9||m.arrayOfSquares[t][r+e].classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<2;e++)t+e>9||m.arrayOfSquares[t+e][r].classList.toggle("active")}})}function S(e,t,r){let n,a,o;document.querySelector(".message").textContent="Place your smallship (1)",e.addEventListener("click",n=function(i){o=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",a),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Smallship",1,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,o)||S(e,t,r)}),e.addEventListener("mouseover",a=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let r=0;r<10;r++)if(e.target===m.arrayOfSquares[t][r]){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<1;e++)r+e>9||m.arrayOfSquares[t][r+e].classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<1;e++)t+e>9||m.arrayOfSquares[t+e][r].classList.toggle("active")}})}function b(){document.querySelector(".rotateButton").classList.toggle("makeVertical"),document.querySelector(".rotateButton").classList.toggle("makeHorizontal")}function B(){let e=Array.from(document.querySelectorAll(".active"));for(let t=0;t<e.length;t++)e[t].classList.remove("active")}class x{constructor(e,t,r){this.name=e,this.length=t,this.remainingLength=t,this.axis=r,this.hit=function(){this.remainingLength--},this.isSunk=function(){return 0===this.remainingLength}}}class L{constructor(){this.board=[],this.allShips=[],this.allShipsDestroyed}init(){for(let e=0;e<10;e++){this.board[e]=[];for(let t=0;t<10;t++)this.board[e][t]={hasShip:!1,isShot:!1}}}placeShip(e,t,r,n,a){if("horizontal"===a){for(let r=0;r<n;r++)if(t+r>9||!0===this.board[e][t+r].hasShip)throw new Error("invalid horizontal position")}else for(let r=0;r<n;r++)if(e+r>9||!0===this.board[e+r][t].hasShip)throw new Error("invalid vertical position");if(this.allShips.push(new x(r,n,a)),"horizontal"===a)for(let r=0;r<n;r++)this.board[e][t+r].hasShip=!0,this.board[e][t+r].ship=this.allShips[this.allShips.length-1];else for(let r=0;r<n;r++)this.board[e+r][t].hasShip=!0,this.board[e+r][t].ship=this.allShips[this.allShips.length-1]}receiveAttack(e,t){this.board[e][t].isShot=!0,this.board[e][t].hasShip&&(this.board[e][t].ship.hit(),this.board[e][t].ship.isSunk(),this.checkShips())}checkShips(){let e=0;for(let t=0;t<this.allShips.length;t++)!0===this.allShips[t].isSunk()&&e++,e===this.allShips.length&&(this.allShipsDestroyed=!0)}}class k extends L{constructor(e,t){super(t),this.name=e,this.usedAttacks=[]}attack(e,t,r){if("bot"===this.name){let e=Math.floor(9*Math.random()),t=Math.floor(9*Math.random());for(let n=0;n<usedAttacks.length;n++)this.usedAttacks[n]==={y:e,x:t}&&this.attack(null,null,r);r.receiveAttack(e,t)}else r.receiveAttack(e,t)}}document.querySelectorAll("button")[0].addEventListener("click",(()=>{!function(e){{let e=new L;e.init(),new k("Player1"),!function(e){const t=document.querySelector(".main");t.textContent="";{const e=document.createElement("div");t.appendChild(e),e.classList.add("player1Area");const r=document.createElement("div");e.appendChild(r),r.classList.add("messageContainer");const n=document.createElement("div");r.appendChild(n),n.classList.add("message");const a=document.createElement("button");e.appendChild(a),a.textContent="rotate",a.classList.add("rotateButton","makeVertical","makeHorizontal"),a.classList.toggle("makeVertical");const o=document.createElement("div");o.classList.add("player1Board"),e.appendChild(o)}}(),function(){let e=document.querySelector(".player1Board");for(let t=0;t<10;t++){m.arrayOfSquares[t]=[];for(let r=0;r<10;r++){let n=document.createElement("div");n.classList.add("active"),n.classList.add("square"),n.classList.toggle("active"),m.arrayOfSquares[t][r]=n,m.arrayOfSquares[t][r].location={y:t,x:r},e.appendChild(n)}}}(),h(e)}}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,