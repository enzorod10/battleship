(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"*{\n    padding: 0px;\n    margin: 0px;\n}\n\nbody{\n    height: 100vh;\n    box-sizing: border-box;\n    display: grid;\n    grid-template-rows: 2fr 20fr 1fr;\n}\n\n.header{\n    border: 1px black solid;\n}\n\n.main{\n    border: 1px red solid;\n    display: flex;\n}\n\n.footer{\n    border: 1px yellow solid;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* main area section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 1 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.playerArea{\n    border: 1px black solid;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 40px;\n}\n\n.playerBoard{\n    width: 450px;\n    height: 450px;\n    border: 1px black solid;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.playerBoard > div{\n    border: 1px black solid;\n}\n\n.square.active{\n    background-color: rgb(153, 81, 81);\n}\n\n.messageContainer{\n    border: 1px red solid;\n    height: 50px;\n    width: 450px;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 2 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player2Area{\n    border: 1px black solid;\n    width: 100%;\n    display: grid;\n}\n\n.player2Board{\n    border: 1px black solid;\n    width: 450px;\n    height: 450px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player2Board > div{\n    border: 1px black solid;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;IACrB,aAAa;AACjB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA,2CAA2C;AAC3C,sBAAsB;AACtB,2CAA2C;;AAE3C,2CAA2C;AAC3C,0BAA0B;AAC1B,2CAA2C;AAC3C;IACI,uBAAuB;IACvB,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,YAAY;AAChB;;AAEA,2CAA2C;AAC3C,0BAA0B;AAC1B,2CAA2C;AAC3C;IACI,uBAAuB;IACvB,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["*{\n    padding: 0px;\n    margin: 0px;\n}\n\nbody{\n    height: 100vh;\n    box-sizing: border-box;\n    display: grid;\n    grid-template-rows: 2fr 20fr 1fr;\n}\n\n.header{\n    border: 1px black solid;\n}\n\n.main{\n    border: 1px red solid;\n    display: flex;\n}\n\n.footer{\n    border: 1px yellow solid;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* main area section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 1 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.playerArea{\n    border: 1px black solid;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 40px;\n}\n\n.playerBoard{\n    width: 450px;\n    height: 450px;\n    border: 1px black solid;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.playerBoard > div{\n    border: 1px black solid;\n}\n\n.square.active{\n    background-color: rgb(153, 81, 81);\n}\n\n.messageContainer{\n    border: 1px red solid;\n    height: 50px;\n    width: 450px;\n}\n\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n/* Player 2 Area Section */\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n.player2Area{\n    border: 1px black solid;\n    width: 100%;\n    display: grid;\n}\n\n.player2Board{\n    border: 1px black solid;\n    width: 450px;\n    height: 450px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.player2Board > div{\n    border: 1px black solid;\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);n&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],s=n.base?c[0]+n.base:c[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=r(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=o(m,n);n.byIndex=l,t.splice(l,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=r(a[i]);t[l].references--}for(var c=n(e,o),s=0;s<a.length;s++){var d=r(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var n={};(()=>{r.d(n,{F:()=>T,t:()=>Z});var e=r(379),t=r.n(e),o=r(795),a=r.n(o),i=r(569),l=r.n(i),c=r(565),s=r.n(c),d=r(216),u=r.n(d),p=r(589),m=r.n(p),A=r(426),h={};function f(e,t){let r=document.querySelectorAll(".playerBoard")[t],n=document.querySelector(".rotateButton"),o=document.querySelector(".message");n.addEventListener("click",B),r.addEventListener("mouseout",S),v(r,o,e)}function v(e,t,r){let n,o,a;document.querySelector(".message").textContent="Place your battleship (5)",e.addEventListener("click",o=function(i){a=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",o),e.removeEventListener("mouseover",n),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Battleship",5,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,a)?y(e,t,r):v(e,t,r)}),e.addEventListener("mouseover",n=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let n=0;n<10;n++)if(e.target===r.board[t][n].dom){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<5;e++)n+e>9||r.board[t][n+e].dom.classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<5;e++)t+e>9||r.board[t+e][n].dom.classList.toggle("active")}})}function y(e,t,r){let n,o,a;document.querySelector(".message").textContent="Place your carrier (4)",e.addEventListener("click",n=function(i){a=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",o),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Carrier",4,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,a)?g(e,t,r):y(e,t,r)}),e.addEventListener("mouseover",o=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let n=0;n<10;n++)if(e.target===r.board[t][n].dom){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<4;e++)n+e>9||r.board[t][n+e].dom.classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<4;e++)t+e>9||r.board[t+e][n].dom.classList.toggle("active")}})}function g(e,t,r){let n,o,a;console.log(r),document.querySelector(".message").textContent="Place your submarine(3)",e.addEventListener("click",n=function(i){a=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",o),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Submarine",3,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,a)?C(e,t,r):g(e,t,r)}),e.addEventListener("mouseover",o=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let n=0;n<10;n++)if(e.target===r.board[t][n].dom){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<3;e++)n+e>9||r.board[t][n+e].dom.classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<3;e++)t+e>9||r.board[t+e][n].dom.classList.toggle("active")}})}function C(e,t,r){let n,o,a;document.querySelector(".message").textContent="Place your cruiser (2)",e.addEventListener("click",n=function(i){a=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",o),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Cruiser",2,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,a)?b(e,t,r):C(e,t,r)}),e.addEventListener("mouseover",o=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let n=0;n<10;n++)if(e.target===r.board[t][n].dom){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<2;e++)n+e>9||r.board[t][n+e].dom.classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<2;e++)t+e>9||r.board[t+e][n].dom.classList.toggle("active")}})}function b(e,t,r){let n,o,a;document.querySelector(".message").textContent="Place your smallship (1)",e.addEventListener("click",n=function(i){if(a=document.querySelector(".rotateButton").classList.contains("makeHorizontal")?"horizontal":"vertical",e.removeEventListener("click",n),e.removeEventListener("mouseover",o),!0===function(e,t,r,n){try{return e.placeShip(t,r,"Smallship",1,n),!0}catch(e){return!1}}(r,i.target.location.y,i.target.location.x,a)){document.querySelector(".message").textContent="All ships placed.. ready to deploy!";let e=document.createElement("div");e.textContent="DEPLOY",document.querySelector(".playerArea").appendChild(e),e.addEventListener("click",(()=>{Z("singlePlayer")}))}else b(e,t,r)}),e.addEventListener("mouseover",o=function(e){let t=Array.from(document.querySelectorAll(".active"));for(let e=0;e<t.length;e++)t[e].classList.remove("active");for(let t=0;t<10;t++)for(let n=0;n<10;n++)if(e.target===r.board[t][n].dom){if(document.querySelector(".rotateButton").classList.contains("makeHorizontal"))for(let e=0;e<1;e++)n+e>9||r.board[t][n+e].dom.classList.toggle("active");if(document.querySelector(".rotateButton").classList.contains("makeVertical"))for(let e=0;e<1;e++)t+e>9||r.board[t+e][n].dom.classList.toggle("active")}})}function B(){document.querySelector(".rotateButton").classList.toggle("makeVertical"),document.querySelector(".rotateButton").classList.toggle("makeHorizontal")}function S(){let e=Array.from(document.querySelectorAll(".active"));for(let t=0;t<e.length;t++)e[t].classList.remove("active")}let L,x;function k(e){E(e),I(e),q(e),M(e),function(e){x=Math.floor(2*Math.random()),L=0===x?"horizontal":"vertical";try{e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),"Smallship",1,L)}catch(t){M(e)}}(e)}function E(e){x=Math.floor(2*Math.random()),L=0===x?"horizontal":"vertical";try{e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),"Battleship",5,L)}catch(t){E(e)}}function I(e){x=Math.floor(2*Math.random()),L=0===x?"horizontal":"vertical";try{e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),"Carrier",4,L)}catch(t){I(e)}}function q(e){x=Math.floor(2*Math.random()),L=0===x?"horizontal":"vertical";try{e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),"Submarine",3,L)}catch(t){q(e)}}function M(e){x=Math.floor(2*Math.random()),L=0===x?"horizontal":"vertical";try{e.placeShip(Math.floor(10*Math.random()),Math.floor(10*Math.random()),"Cruiser",2,L)}catch(t){M(e)}}function w(e){e[0].player.winner,console.log("player 1 wins!")}function z(){document.querySelectorAll(".playerBoard")[1].addEventListener("click",P)}function P(e){for(let t=0;t<10;t++)for(let r=0;r<10;r++)T[1].playerBoard.board[t][r].dom===e.target&&(T[0].player.attack(t,r,T[1].playerBoard),document.querySelectorAll(".playerBoard")[1].removeEventListener("click",P),!0===T[1].playerBoard.allShipsDestroyed?(T[0].player.winner=!0,w(T)):(T[1].player.attack(0,0,T[0].playerBoard),!0===T[0].playerBoard.allShipsDestroyed?(T[1].player.winner=!0,w(T)):z()))}h.styleTagTransform=m(),h.setAttributes=s(),h.insert=l().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),t()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;class H{constructor(e,t,r){this.name=e,this.length=t,this.remainingLength=t,this.axis=r,this.hit=function(){this.remainingLength--},this.isSunk=function(){return 0===this.remainingLength}}}class Y{constructor(){this.board=[],this.allShips=[],this.allShipsDestroyed}init(){for(let e=0;e<10;e++){this.board[e]=[];for(let t=0;t<10;t++)this.board[e][t]={hasShip:!1,isShot:!1}}}placeShip(e,t,r,n,o){if("horizontal"===o){for(let r=0;r<n;r++)if(t+r>9||!0===this.board[e][t+r].hasShip)throw new Error("invalid horizontal position")}else for(let r=0;r<n;r++)if(e+r>9||!0===this.board[e+r][t].hasShip)throw new Error("invalid vertical position");if(this.allShips.push(new H(r,n,o)),"horizontal"===o)for(let r=0;r<n;r++)this.board[e][t+r].hasShip=!0,this.board[e][t+r].ship=this.allShips[this.allShips.length-1];else for(let r=0;r<n;r++)this.board[e+r][t].hasShip=!0,this.board[e+r][t].ship=this.allShips[this.allShips.length-1]}receiveAttack(e,t){this.board[e][t].isShot=!0,this.board[e][t].hasShip&&(this.board[e][t].ship.hit(),this.board[e][t].ship.isSunk(),this.checkShips())}checkShips(){let e=0;for(let t=0;t<this.allShips.length;t++)!0===this.allShips[t].isSunk()&&e++,e===this.allShips.length&&(this.allShipsDestroyed=!0)}}class j extends Y{constructor(e,t){super(t),this.name=e,this.usedAttacks=[]}attack(e,t,r){if("bot"===this.name){let e=Math.floor(9*Math.random()),t=Math.floor(9*Math.random());r.receiveAttack(e,t)}else r.receiveAttack(e,t)}}let T=[];function Z(e){"singlePlayer"===e&&(function(){let e=new Y;e.init();let t=new j("bot");T[1]={player:t,playerBoard:e},k(T[1].playerBoard)}(),function(e){const t=document.querySelector(".main");t.textContent="";let r=document.createElement("div");r.classList.add("playerArea");let n=document.createElement("div");n.classList.add("playerArea"),t.appendChild(r),t.appendChild(n);let o=[];o[0]=document.createElement("div"),o[1]=document.createElement("div"),o[0].classList.add("message"),o[1].classList.add("message"),r.appendChild(o[0]),n.appendChild(o[1]);let a=document.createElement("div"),i=document.createElement("div");a.classList.add("playerBoard"),i.classList.add("playerBoard"),r.appendChild(a),n.appendChild(i);for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[1].playerBoard.board[t][r].dom=document.createElement("div"),e[1].playerBoard.board[t][r].dom.classList.add("square"),a.appendChild(e[0].playerBoard.board[t][r].dom),i.appendChild(e[1].playerBoard.board[t][r].dom),!0===e[0].playerBoard.board[t][r].hasShip&&e[0].playerBoard.board[t][r].dom.classList.add("active"),!0===e[1].playerBoard.board[t][r].hasShip&&e[1].playerBoard.board[t][r].dom.classList.add("active")}(T),z())}document.querySelectorAll("button")[0].addEventListener("click",(()=>{!function(){let e=new Y;e.init();let t=new j("Player1");T[0]={player:t,playerBoard:e},function(){const e=document.querySelector(".main");e.textContent="";const t=document.createElement("div");e.appendChild(t),t.classList.add("playerArea");const r=document.createElement("div");t.appendChild(r),r.classList.add("messageContainer");const n=document.createElement("div");r.appendChild(n),n.classList.add("message");const o=document.createElement("button");t.appendChild(o),o.textContent="rotate",o.classList.add("rotateButton","makeVertical","makeHorizontal"),o.classList.toggle("makeVertical");const a=document.createElement("div");a.classList.add("playerBoard"),t.appendChild(a)}(),function(e,t){let r=document.querySelectorAll(".playerBoard")[0];for(let t=0;t<10;t++)for(let n=0;n<10;n++)e[t][n].dom=document.createElement("div"),e[t][n].dom.classList.add("active"),e[t][n].dom.classList.add("square"),e[t][n].dom.classList.toggle("active"),e[t][n].dom.location={y:t,x:n},r.appendChild(e[t][n].dom)}(T[0].playerBoard.board),f(T[0].playerBoard,0)}()})),console.log(T)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,